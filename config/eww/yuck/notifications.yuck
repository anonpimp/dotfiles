(defwidget dnd [icon color action waiting count]
  (eventbox
		:class "notifications-dnd"
    :halign "start"
    :cursor "pointer"
    (box
      (button 
        :onclick action
        :style "color: ${color}"
        icon
      )
      (revealer 
        :reveal waiting
        :transition "crossfade"
        :duration "300ms"
        (label
          :class "notifications-dnd-count"
          :text count
        )
      )
    )
  )
)

(defwidget notifications []
	(box 
    :class "notifications-box" 
    :space-evenly "false" 
    :orientation "v"
	  (box 
      :class "notifications-header"
      :spacing 10
      (dnd
        :action "dunstctl set-paused toggle"
        :icon {notifications-dnd ? "" : ""}
        :color {notifications-dnd ? "#dd6777;" : "#ceb188;"}
        :waiting {dunst-waiting == "0" ? "false" : "true"}
        :count dunst-waiting
      )
	    (label 
        :class "notifications-header-label" 
        :text "Notifications"  
      )
      (revealer 
				:reveal {dunst-count == "0" ? "false" : "true"}
				:transition "slideleft"
				:halign "end"
				(box
					:class "clear-box"
					:space-evenly false
					:spacing 20
					(eventbox
						:cursor "pointer"
						(button 
							:class "notifications-header-clear" 
							:halign "end"
							:onclick "scripts/logger.zsh clear" 
							""
						)
					)
				)
      )
    )
    (literal 
      :content notifications-cards
    )
    (box 
      :class "calendar-box"
      (calendar 
        :day calendar-day 
        :month calendar-month 
        :year calendar-year
      )
    )
    (box 
      :class "weather-box"
      :valign "end"
      :vexpand true
      (box 
        :space-evenly false 
        :orientation "v"
        (label 
          :class "weather-desc" 
          :halign "start" 
          :text weather-desc
        )
        (label 
          :class "weather-temp" 
          :halign "start" 
          :text "${weather-temp}°C"
        )
      )
      (box 
        (label 
          :class "weather-icon" 
          :halign "end" 
          :valign "end" 
          :text weather-icon 
          :style "color: ${weather-color}"
        )
      )
    )
  )
)

(defwidget notification-card 
  [summary body image image_width image_height application time 
  ?class ?SL ?L ?screenshot ?show]
  (eventbox 
    :class "notification-eventbox"
    :onclick L
    (box 
      :space-evenly false 
      :orientation "v"
      (box 
        :class "notification-header-box"
        (label 
          :class "notification-app-name" 
          :text "${application}" 
          :halign "start"
        )
        (box
          :space-evenly false
          :halign "end"
          :spacing 15
          (label
            :class "notification-time"
            :halign "end"
            :text time
          )
          (eventbox
            :cursor "pointer"
            (button 
              :class "notification-close" 
              :onclick "scripts/logger.zsh rm_id ${SL}"
              :halign "end"
              "" 
            )
          )
        )
      )
      (box  
        :class "notification-content"
        :orientation {screenshot ? "v" : "h"}
        :space-evenly "false" 
        :spacing 10
        (label 
          :class "screenshot-name" 
          :visible screenshot 
          :text image
        )
        (box 
          :class "notification-image"
          :style "background-image: url('${image}');"
          :halign "center"
          :valign "center"
          :width image_width
          :height image_height
        )
        (box 
          :visible {screenshot ? false : show}
          :class "notification-card"
          :orientation "vertical"
          :class class
          :space-evenly false
          :hexpand true
          (label 
            :limit-width 30
            :wrap true
            :xalign 0
            :text summary
            :class "notification-summary"
            :halign "start"
            :hexpand true
          )
          (label 
            :limit-width 130
            :wrap true
            :xalign 0
            :text body
            :halign "start"
            :class "notification-body"
          )
        )
        (box
          :class "screenshot-buttons-box"
          :visible screenshot
          :spacing 40
          (eventbox
            :cursor "pointer"
            (button
              :class "screenshot-open"
              :onclick "viewnior '${image}' &"
              :timeout "1s"
              "Open"
            )
          )
          (eventbox
            :cursor "pointer"
            (button
              :class "screenshot-delete"
              :onclick "rm -f '${image}' && scripts/logger.zsh rm_id ${SL}"
              :timeout "1s"
              "Delete"
            )
          )
        )
      )
    )
  )
)

(defwindow notifications
  :wm-ignore false
  :geometry (geometry :width "25%" :height "80%":y "-6%" :anchor "bottom right")
  (notifications)
)